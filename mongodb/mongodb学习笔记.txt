私塾教育
文档地址：https://docs.mongodb.com/

每个用户有四门课:
for(var i=0;i<100;i++){
	for(var j=0;j<5;j++){
		db.users.insertOne({"userId":"s"+i,course:"c"+j,score:Math.random()*100})
	}
}

1)考了70分以上学生
db.users.aggregate({"$match":{"score":{"$gte":70}}});     //为了学习aggregate
db.users.aggregate({$match:{score:{$gte:70}}});           //发现关键词和属性没有双引号也没事
db.users.aggregate([{$match:{score:{$gte:70}}}]);         //aggregate中是连锁操作,即使是只有一个操作也可以使用中括号
db.users.find({score:{$gte:70}});                         //这种是最简单的方式

db.users.aggregate([{$match:{score:{$gte:70}}},{$project:{_id:0,course:1,score:1}}]);//先找出70分以上的，再投影只展示course列和score列
db.users.aggregate({$match:{score:{$gte:70}}},{$project:{_id:0,course:1,score:1}});//中括号也可以删除，中括号看来没什么用了,以后都可以不用了

2)某个学生名字出现一次就给他加1   group函数必须有参数_id
db.users.aggregate({$match:{score:{$gte:70}}},{$project:{_id:0,userId:1}},{$group:{_id:"$userId",count:{$sum:1}}}); //注意 "$userId" 这里必须有引号，表示对字段userId的引用 group函数必须有参数_id


3)对第二部的结果进行排序(每个人五门课程，70分以上的有几门，并且按照每个人70分以上的课程多的进行倒序排序)
db.users.aggregate({$match:{score:{$gte:70}}},{$project:{_id:0}},{$group:{_id:"$userId",count:{$sum:1}}},{$sort:{count:-1}});

4)每个人70分以上课程的总数，进行倒序排序，并且取出前三名(下面这个结果可以看出来和投影project并没有什么关系，老师可能只是为了练习用)
db.users.aggregate({$match:{score:{$gte:70}}},{$group:{_id:"$userId",count:{$sum:1}}},{$sort:{count:-1}},{$limit:3})

发现了上面的limit的实际应用中可能会出现的问题：当把$limit:3变成$limit:4的时候 每次结果顺序都不一样，还不知道怎么处理!!!


管道操作符：上面的一系列操作就是管道操作符
$match:对文档集合进行筛选,通常会放到管道最前面的位置,在投影和分组前使用可以使用索引
$project:
1）可以指定包含和排除字段
db.users.aggregate({$project:{_id:0}});
2）可以给字段重命名 score字段变成newScore
db.users.aggregate({$project:{newScore:"$score"}});//默认只显示了newScore和id列
db.users.aggregate({$project:{newScore:"$score",_id:0,score:1}});//显示newScore和score列
db.users.aggregate({$project:{newScore:"$score",_id:0,score:1,newScore:-1}});//只显示score列(没啥用)
3）可以进行数学运算 给所有人分数增加50分 (这个加法运算特别怪语法，有逗号，有中括号，但是没有大括号，很容易错 $score也要引号引起来)
db.users.aggregate({$project:{newScore:{$add:["$score",50]}}});


$unwind
把数组中的每个值拆分成单独的文档
db.t1.insert({"userId":"u1","score":[10,20,30]})
> db.t1.aggregate({"$unwind":"$score"})
{ "_id" : ObjectId("5d84517b6211f3fbd4d08052"), "userId" : "u1", "score" : 10 }
{ "_id" : ObjectId("5d84517b6211f3fbd4d08052"), "userId" : "u1", "score" : 20 }
{ "_id" : ObjectId("5d84517b6211f3fbd4d08052"), "userId" : "u1", "score" : 30 }

MapReduce:运行慢，不适合实时
举例：找出集合中所有的key，并统计每个键出现的次数
var map = function(){
	for(var key in this){//this代表对当前文档(表中的一行)的引用
		emit(key,{count:1})
	}
};
var reduce = function(key,emits){
	var total = 0;
	for(var i in emits){
		total += emits[i].count;
	}
	return {"count":total};
};
var mr = db.runCommand({"mapreduce":"users","map":map,"reduce":reduce,"out":"myOut"});//myOut是个集合(表),不用提前建立
如何查看结果：
> db.myOut.find()
{ "_id" : "_id", "value" : { "count" : 500 } }
{ "_id" : "course", "value" : { "count" : 500 } }
{ "_id" : "score", "value" : { "count" : 500 } }
{ "_id" : "userId", "value" : { "count" : 500 } }

举例2：统计每个userId出现的次数
var map = function(){
	emit(this.userId,{count:1})
};
var reduce = function(key,emits){
	var total = 0;
	for(var i in emits){
		total += emits[i].count;
	}
	return {"count":total};
};
var mr = db.runCommand({"mapreduce":"users","map":map,"reduce":reduce,"out":"myOut"});

举例3：发送给map前对文档进行过滤（非常有用）
var query = {"userId":{$lt:"s2"}}
var mr = db.runCommand({"mapreduce":"users","map":map,"reduce":reduce,"query":query,"out":"myOut"});
> db.myOut.find()
{ "_id" : "s0", "value" : { "count" : 5 } }
{ "_id" : "s1", "value" : { "count" : 5 } }

举例4：finalize 发送到out之前的最终结果
var finalize = function(k,v){
	return {"aaa":k,"bbb":v}
}
var mr = db.runCommand({"mapreduce":"users","map":map,"reduce":reduce,"query":query,"out":"myOut","finalize":finalize});
> db.myOut.find()
{ "_id" : "s0", "value" : { "aaa" : "s0", "bbb" : { "count" : 5 } } }
{ "_id" : "s1", "value" : { "aaa" : "s1", "bbb" : { "count" : 5 } } }
{ "_id" : "s10", "value" : { "aaa" : "s10", "bbb" : { "count" : 5 } } }
{ "_id" : "s11", "value" : { "aaa" : "s11", "bbb" : { "count" : 5 } } }
-----------



--------------------------------------------------------------------------------------
mongodb的陷阱:
陷阱1：
陷阱: 在MongoDB中key的顺序非常重要，{ a: 1, b: 2 } 和 { b: 2, a: 1 }是不匹配的。
为什么: MongoDB使用叫做BSON的二进制数据格式。在BSON中key的顺序非常重要。注意，JSON对象是一个无序的键/值对集合。
db.books.insert({title:"老人与海",meta:{author:"zhangsan",year:2008}});
//能查到
db.books.find({title:"老人与海",meta:{author:"zhangsan",year:2008}});
db.books.find({meta:{author:"zhangsan",year:2008},title:"老人与海"});
db.books.find({title:"老人与海"});
db.books.find({meta:{author:"zhangsan",year:2008}});
//不能查到
db.books.find({meta:{year:2008,author:"zhangsan"}});