启动一个容器 ： docker run -it centos /bin/bash
进入容器后：exit 退出容器
查看容器进程 docker ps -a 发现exit了
重新启动容器 docker start 容器名称
进入重新启动的容器 docker attach 容器名称
进入重新启动的容器 docker exec -it 容器名称 /bin/bash 然后exit 发现容器还在启动中(docker ps -a ),所以感觉docker exec命令比docker attach命令好,因为退出后不会退出容器

dockerhub的用户名:手机号 密码：高级

从容器创建本地镜像（就跟git命令 commit只会提交到本地一样）：
docker commit -a "jinyuchuan" -m"submit container to image local" 26bed850d6f8 mycentos:V1
解读：
	-a 作者
    -m 提示
	26bed850d6f8 容器id
	mycentos:V1  新的镜像的名称
	
用这个新生成的镜像看看能创建容器不
docker run --name mycontainer -it mycentos:V1 /bin/bash 成功了

下面把这个镜像放到dockerhub上给别人使用
1)docker login
2)docker push 15801001455/mycentos:V1  
       其中jinyuchuan 是dockerhub的账号 mycentos:V1是镜像名字+版本号
   发现不成功，原来要给要上传的镜像起一个别名,第三步骤
3)docker tag 镜像id 15801001455/mycentos:V1
4)继续docker push 15801001455/mycentos:V1 发现还是不成功
     处理如下： 
	    1)mv /root/.docker/config.json /root/.docker/config.json.bak
		2)docker login 重新输入用户名和密码
		3)docker push 15801001455/mycentos:V1
	 



-------------------------------------------------------------------------------------
docker安装的参考：https://docs.docker.com/install/linux/docker-ce/centos/ 按照这个安装最省事
           1)  yum remove docker \
                  docker-client \
                  docker-client-latest \
                  docker-common \
                  docker-latest \
                  docker-latest-logrotate \
                  docker-logrotate \
                  docker-engine
           2)  yum install -y yum-utils device-mapper-persistent-data lvm2
	   3)  yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
	   4)  yum install docker-ce docker-ce-cli containerd.io
	   5)  systemctl start docker
	   6)  docker run hello-world

WORKDIR:
	1) 注意用WORKDIR,不要用RUN cd
	2) 尽量使用绝对目录

ENV:

VOLUMN AND EXPOSE

RUN and CMD and ENTRYPOINT:
	RUN: 执行命令并创建新的Image Layer
	CMD: 设置容器启动后默认的命令和参数
		1)容器启动时默认执行的命令
		2）如果启动容器docker run执行了其他命令，则CMD命令被忽略 比如docker run -it centos /bin/bash，由于执行了/bin/bash则忽略CMD命令
		3)多个CMD，只有最后一个会执行
	ENTRYPOINT: 设置容器启动时运行的命令
		1)让容器以应用程序或者服务的形式运行
		2）不会被忽略，一定会执行
		3）最佳实践：写一个shell脚本作为entrypoint
   Shell模式：
        RUN yum install -y vim
	CMD echo "hello docker"
	ENTRYPOINT echo "hello docker"
   Exec模式:
   	RUN ["yum","install","-y","vim"]


Docker也有私有仓库 不用偏偏把隐私放到dockerhub上 到时候用到再看看

#删除退出的容器
docker rm $(docker ps -aq)

Dockerfile外部如何传递参数(ENTRYPOINT和CMD配合使用 ENTRYPOINT指定命令 CMD传空 就可以在运行容器的时候指定参数了)
	1）Dockerfile
		FROM ubuntu
		RUN apt-get update && apt-get install -y stress
		ENTRYPOINT ["/usr/bin/stree"]
		CMD []
	2)docker build 15801001455/ubuntu-stree .
	3）生成容器给镜像传递参数使用：docker run -it 15801001455/ubuntu-stress --vm 1 --verbose


限制容器的资源：
//这个命令代表容器最多占用200M+200Mswap=400M内存，但是这个容器启动里面用stress压力测试申请500M内存，容器就启动不起来了
docker run --memory=200M 15801001455/ubuntu-stree --vm 1 --vm-bytes 500M
//cpu也可以设置权重 用到再看 docker run --cpu-shares=10 --name=test1 15801001455/ubuntu-stress --cpu 1